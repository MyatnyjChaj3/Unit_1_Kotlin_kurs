// способы быстрого написания fun main() {}:
// main + tab -> fun main() {}
// maina + tab -> fun main(args: Array<String>) {}

fun main() {
    println("Hello, World!") // print/println - вывод
                             // в конце не нужно никаких знаков вроде ";"
    Numbers()

    val chars = readLine()!![0]
    decimalDigitValue(chars)
}

// Числа в битах: Double(64), Float(32), Long(64б), Int(32), Short(16), Byte(8)
// объявление переменных:
// val/var <имя_переменной>: <Тип_переменной>
// val - неизменяемая переменная, var - изменяемая

//Рекомендуется всегда использовать val, если это позволяет логика программы.
//При этом нужно помнить, что хотя ссылка val неизменяема, сам объект может быть изменяемым.

fun Numbers(){
    val age1: Int
    age1 = 7
    println("age1 = $age1")

    var age2 = 78
    println("age2 = $age2")
    age2 = 90
    println("age2 = $age2")
}

//В языке Kotlin присутствуют следующие виды символьных постоянных (констант) для целых значений:
//
//Десятичные числа: 123
//Тип Long обозначается заглавной L: 123L
//Шестнадцатеричные числа: 0x0F
//Двоичные числа: 0b00001011
//ВНИМАНИЕ: Восьмеричные литералы не поддерживаются.
//
//Также Kotlin поддерживает числа с плавающей запятой:
//
//Тип Double по умолчанию: 123.5, 123.5e10
//Тип Float обозначается с помощью f или F: 123.5f
//Нижние подчеркивания в числовых литералах (начиная с версии 1.1)
// val creditCardNumber = 1234_5678_9012_3456L

// символы: Char 'a', '2', '\n'
fun decimalDigitValue(c: Char): Int {
    if (c !in '0'..'9')
        throw IllegalArgumentException("Вне диапазона")
    return c.toInt() - '0'.toInt() // Явные преобразования в число
}

// логический тип: Boolean -> true/false
//|| – ленивое логическое ИЛИ
//&& – ленивое логическое И
//! - отрицание